const { Telegraf, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// –°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
bot.start((ctx) => {
    return ctx.reply(
        '–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üí∞ –ú—ñ–π –±–∞–ª–∞–Ω—Å', 'my_balance')],
            [Markup.button.callback('üèß –í–∏–≤–µ—Å—Ç–∏', 'withdraw')]
        ])
    );
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ú—ñ–π –±–∞–ª–∞–Ω—Å¬ª
bot.action('my_balance', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.reply(
        '–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:',
        Markup.inlineKeyboard([
            [Markup.button.callback('UAH üá∫üá¶', 'balance_uah')],
            [Markup.button.callback('EUR üí∂', 'balance_eur')],
            [Markup.button.callback('USD üíµ', 'balance_usd')]
        ])
    );
});

// –î–∏–Ω–∞–º—ñ—á–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å—É –≤ –∫–æ–∂–Ω—ñ–π –≤–∞–ª—é—Ç—ñ
const currencies = ['uah', 'eur', 'usd'];
currencies.forEach((cur) => {
    bot.action(`balance_${cur}`, async (ctx) => {
        await ctx.answerCbQuery();
        const user = await prisma.user.findUnique({
            where: { username: ctx.from.username },
            select: { [`balance_${cur}`]: true }
        });
        const amount = user[`balance_${cur}`].toFixed(2);
        const labels = { uah: 'UAH', eur: 'EUR', usd: 'USD' };
        return ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${labels[cur]} ${amount}`);
    });
});

// /add_project ‚Äî –¥–æ–¥–∞—î–º–æ –ø—Ä–æ–µ–∫—Ç
bot.command('add_project', async (ctx) => {
    ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É:');
    bot.on('text', async (msgCtx) => {
        const projectName = msgCtx.message.text.trim();
        try {
            const project = await prisma.project.create({ data: { name: projectName } });
            await msgCtx.reply(`–ü—Ä–æ–µ–∫—Ç "${project.name}" —Å—Ç–≤–æ—Ä–µ–Ω–æ (ID: ${project.id})`);
        } catch (e) {
            await msgCtx.reply('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        }
        bot.removeListener('text');
    });
});

// /add_cc ‚Äî –¥–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫—É
bot.command('add_cc', async (ctx) => {
    ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (16 —Ü–∏—Ñ—Ä):');
    bot.on('text', async (msgCtx) => {
        const ccNumber = msgCtx.message.text.trim();
        if (!/^\d{16}$/.test(ccNumber)) {
            await msgCtx.reply('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ú–∞—î –±—É—Ç–∏ 16 —Ü–∏—Ñ—Ä. –í–∏–∫–æ–Ω–∞–π—Ç–µ /add_cc –∑–Ω–æ–≤—É.');
        } else {
            await prisma.paymentCard.create({ data: { number: ccNumber, userId: ctx.from.id } });
            await msgCtx.reply('–ö–∞—Ä—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.');
        }
        bot.removeListener('text');
    });
});

// /add_payment ‚Äî –∑–∞–ø–∏—Å –ø–ª–∞—Ç–µ–∂—É —Ç–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª
bot.command('add_payment', async (ctx) => {
    const step = { stage: 0, data: {} };
    ctx.reply('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç–∞ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 100 usd):');
    bot.on('text', async (msgCtx) => {
        if (step.stage === 0) {
            const [sumStr, currency] = msgCtx.message.text.trim().split(' ');
            const sum = parseFloat(sumStr);
            if (isNaN(sum) || !currencies.includes(currency)) {
                await msgCtx.reply('–ù–µ–≤—ñ—Ä–Ω–æ. –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç–∞ –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 100 usd');
                return;
            }
            step.data.sum = sum;
            step.data.currency = currency;
            step.stage = 1;
            await msgCtx.reply('–í–≤–µ–¥—ñ—Ç—å project ID –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø–ª–∞—Ç–µ–∂—É:');
        } else if (step.stage === 1) {
            const projectId = parseInt(msgCtx.message.text.trim());
            const project = await prisma.project.findUnique({ where: { id: projectId } });
            if (!project) {
                await msgCtx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
                return;
            }
            const payment = await prisma.payment.create({
                data: {
                    amount: step.data.sum,
                    currency: step.data.currency,
                    projectId,
                    userId: ctx.from.id
                }
            });
            const users = await prisma.projectUser.findMany({ where: { projectId } });
            const share = step.data.sum / users.length;
            for (const u of users) {
                await prisma.user.update({
                    where: { id: u.userId },
                    data: { [`balance_${step.data.currency}`]: { increment: share } }
                });
            }
            await msgCtx.reply(`–ü–ª–∞—Ç—ñ–∂ –¥–æ–¥–∞–Ω–æ —Ç–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ –º—ñ–∂ ${users.length} —É—á–∞—Å–Ω–∏–∫–∞–º–∏.`);
            bot.removeListener('text');
        }
    });
});

// /withdraw ‚Äî –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤
bot.action('withdraw', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.reply('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç–∞ –≤–∞–ª—é—Ç—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 50 eur):');
    bot.on('text', async (msgCtx) => {
        const [sumStr, currency] = msgCtx.message.text.trim().split(' ');
        const sum = parseFloat(sumStr);
        if (isNaN(sum) || !currencies.includes(currency)) {
            await msgCtx.reply('–ù–µ–≤—ñ—Ä–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
            return;
        }
        const user = await prisma.user.findUnique({ where: { username: ctx.from.username } });
        if (user[`balance_${currency}`] < sum) {
            await msgCtx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${user[`balance_${currency}`]}`);
        } else {
            await prisma.withdrawal.create({ data: { amount: sum, currency, userId: user.id } });
            await prisma.user.update({
                where: { id: user.id },
                data: { [`balance_${currency}`]: { decrement: sum } }
            });
            await msgCtx.reply(`–í–∏–≤–µ–¥–µ–Ω–æ ${sum} ${currency}.`);
        }
        bot.removeListener('text');
    });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log('Bot started'));
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));