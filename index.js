const { Telegraf, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const currencies = ['uah', 'eur', 'usd'];

// –°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
bot.start((ctx) => {
    return ctx.reply(
        '–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üí∞ –ú—ñ–π –±–∞–ª–∞–Ω—Å', 'my_balance')],
            [Markup.button.callback('üèß –í–∏–≤–µ—Å—Ç–∏', 'withdraw')]
        ])
    );
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ú—ñ–π –±–∞–ª–∞–Ω—Å¬ª
bot.action('my_balance', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.reply(
        '–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:',
        Markup.inlineKeyboard(
            currencies.map(cur => {
                const labels = { uah: 'UAH üá∫üá¶', eur: 'EUR üí∂', usd: 'USD üíµ' };
                return [Markup.button.callback(labels[cur], `balance_${cur}`)];
            })
        )
    );
});

// –î–∏–Ω–∞–º—ñ—á–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –±–∞–ª–∞–Ω—Å—É
currencies.forEach(cur => {
    bot.action(`balance_${cur}`, async (ctx) => {
        await ctx.answerCbQuery();
        const user = await prisma.user.findUnique({
            where: { username: ctx.from.username },
            select: { [`balance_${cur}`]: true }
        });
        const amount = user[`balance_${cur}`]?.toFixed(2) || '0.00';
        const labels = { uah: 'UAH', eur: 'EUR', usd: 'USD' };
        return ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${labels[cur]} ${amount}`);
    });
});

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
require('./handlers/auth')(bot, prisma);
require('./handlers/user')(bot, prisma);

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log('Bot started'));
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));


// handlers/auth.js

module.exports = (bot, prisma) => {
    // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è /add_project
    bot.command('add_project', async (ctx) => {
        const listener = async (msgCtx) => {
            const name = msgCtx.message.text.trim();
            try {
                const project = await prisma.project.create({ data: { name } });
                await msgCtx.reply(`–ü—Ä–æ–µ–∫—Ç "${project.name}" —Å—Ç–≤–æ—Ä–µ–Ω–æ (ID: ${project.id})`);
            } catch {
                await msgCtx.reply('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É.');
            }
            bot.off('text', listener);
        };
        await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É:');
        bot.on('text', listener);
    });

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ /add_cc
    bot.command('add_cc', async (ctx) => {
        const listener = async (msgCtx) => {
            const num = msgCtx.message.text.trim();
            if (!/^\d{16}$/.test(num)) {
                await msgCtx.reply('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ú–∞—î –±—É—Ç–∏ 16 —Ü–∏—Ñ—Ä.');
            } else {
                await prisma.paymentCard.create({ data: { number: num, userId: ctx.from.id } });
                await msgCtx.reply('–ö–∞—Ä—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.');
            }
            bot.off('text', listener);
        };
        await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (16 —Ü–∏—Ñ—Ä):');
        bot.on('text', listener);
    });
};