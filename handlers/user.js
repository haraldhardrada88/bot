const { Markup } = require('telegraf');

module.exports = function userHandler(bot, prisma, sessions) {
    const currencies = ['uah', 'eur', 'usd'];
    const labels = { uah: 'UAH üá∫üá¶', eur: 'EUR üí∂', usd: 'USD üíµ' };

    function getSession(ctx) {
        const session = sessions.get(ctx.from.id);
        console.log('[DEBUG] session for', ctx.from.username, session);
        return session;
    }

    // Show balance menu
    bot.hears('–ë–∞–ª–∞–Ω—Å', async (ctx) => {
        const session = getSession(ctx);
        if (!session?.authenticated) return ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ /start');
        return ctx.reply(
            '–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:',
            Markup.inlineKeyboard(currencies.map(cur => [Markup.button.callback(labels[cur], `bal_${cur}`)]))
        );
    });

    // Handle balance selection
    currencies.forEach(cur => {
        bot.action(`bal_${cur}`, async (ctx) => {
            await ctx.answerCbQuery();
            const session = getSession(ctx);
            if (!session?.authenticated) return ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ /start');
            const user = await prisma.user.findUnique({ where: { id: session.userId }, select: { [`balance_${cur}`]: true } });
            const amount = (user[`balance_${cur}`] || 0).toFixed(2);
            const mainKb = require('../keyboards/main');
            return ctx.reply(
                `–í–∞—à –±–∞–ª–∞–Ω—Å: ${labels[cur].split(' ')[0]} ${amount}`,
                mainKb(session.role)
            );
        });
    });

    // Withdrawal: choose currency
    bot.hears('–í–∏–≤–µ—Å—Ç–∏', async (ctx) => {
        const session = getSession(ctx);
        if (!session?.authenticated) return ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ /start');
        session.stage = 'choose_currency';
        return ctx.reply(
            '–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:',
            Markup.inlineKeyboard(currencies.map(cur => [Markup.button.callback(labels[cur], `wd_curr_${cur}`)]))
        );
    });

    currencies.forEach(cur => {
        bot.action(`wd_curr_${cur}`, async (ctx) => {
            await ctx.answerCbQuery();
            const session = getSession(ctx);
            session.stage = 'enter_amount';
            session.data = { currency: cur };
            return ctx.reply(`–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —É ${labels[cur]} (–¥–æ 2 –∑–Ω–∞–∫—ñ–≤):`);
        });
    });

    // Enter amount
    bot.on('text', async (ctx, next) => {
        const session = getSession(ctx);
        if (!(session?.authenticated && session.stage === 'enter_amount')) return next();
        const text = ctx.message.text.trim();
        if (!/^[0-9]+(\.[0-9]{1,2})?$/.test(text)) return ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑');
        session.data.sum = parseFloat(text);
        session.stage = 'enter_card';
        return ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (16 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–∞ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏):');
    });

    // Enter card
    bot.on('text', async (ctx, next) => {
        const session = getSession(ctx);
        if (!(session?.authenticated && session.stage === 'enter_card')) return next();
        const raw = ctx.message.text.replace(/\s+/g, '');
        if (!/^\d{16}$/.test(raw)) return ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–∫–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑');

        const { sum, currency } = session.data;
        const userId = session.userId;
        const dbUsername = (await prisma.user.findUnique({ where: { id: userId }, select: { username: true } })).username;
        const withdraw = await prisma.withdrawal.create({ data: { amount: sum, currency, userId, cardNumber: raw, status: 'pending' } });
        await prisma.user.update({ where: { id: userId }, data: { [`balance_${currency}`]: { decrement: sum } } });
        session.stage = null;
        const mainKb = require('../keyboards/main');
        await ctx.reply('–ó–∞—è–≤–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞, –æ—á—ñ–∫—É–π—Ç–µ', mainKb(session.role));

        // Notify admin
        const adminChatId = process.env.ADMIN_CHAT_ID;
        if (adminChatId) {
            const msg = `–ó–∞–ø–∏—Ç #${withdraw.id}:
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${dbUsername}
–°—É–º–∞: ${sum} ${currency}
–ö–∞—Ä—Ç–∫–∞: ${raw}`;
            await bot.telegram.sendMessage(adminChatId, msg, Markup.inlineKeyboard([
                Markup.button.callback('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', `wd_conf_${withdraw.id}`),
                Markup.button.callback('–°–∫–∞—Å—É–≤–∞—Ç–∏', `wd_cancel_${withdraw.id}`)
            ]));
        }
    });

    // Confirm by admin
    bot.action(/wd_conf_\d+/, async (ctx) => {
        await ctx.answerCbQuery();
        const id = parseInt(ctx.callbackQuery.data.split('_')[2]);
        const w = await prisma.withdrawal.update({ where: { id }, data: { status: 'confirmed' } });
        await ctx.deleteMessage();

        const sessionUser = [...sessions.values()].find(s => s.userId === w.userId);
        const username = (await prisma.user.findUnique({ where: { id: w.userId }, select: { username: true } })).username;
        if (sessionUser?.telegramId) {
            await bot.telegram.sendMessage(sessionUser.telegramId, `–í–∞—à –∑–∞–ø–∏—Ç #${w.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –°—É–º–∞: ${w.amount} ${w.currency}`);
        }
        return ctx.reply(`–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∑–∞–ø–∏—Ç #${w.id}:
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${username}
–°—É–º–∞: ${w.amount} ${w.currency}
–ö–∞—Ä—Ç–∫–∞: ${w.cardNumber}`);
    });

    // Cancel by admin
    bot.action(/wd_cancel_\d+/, async (ctx) => {
        await ctx.answerCbQuery();
        const id = parseInt(ctx.callbackQuery.data.split('_')[2]);
        const w = await prisma.withdrawal.update({ where: { id }, data: { status: 'cancelled' } });
        await prisma.user.update({ where: { id: w.userId }, data: { [`balance_${w.currency}`]: { increment: w.amount } } });
        await ctx.deleteMessage();

        const sessionUser = [...sessions.values()].find(s => s.userId === w.userId);
        const username = (await prisma.user.findUnique({ where: { id: w.userId }, select: { username: true } })).username;
        if (sessionUser?.telegramId) {
            await bot.telegram.sendMessage(sessionUser.telegramId, `–í–∞—à –∑–∞–ø–∏—Ç #${w.id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ. ${w.amount} ${w.currency} –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –±–∞–ª–∞–Ω—Å`);
        }
        return ctx.reply(`–°–∫–∞—Å–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Ç #${w.id}:
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${username}
–°—É–º–∞: ${w.amount} ${w.currency}
–ö–∞—Ä—Ç–∫–∞: ${w.cardNumber}`);
    });

    // Pending requests
    bot.hears('–ó–∞–ø–∏—Ç–∏ –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ', async (ctx) => {
        const session = getSession(ctx);
        if (!session?.authenticated) return ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, /start');
        const isAdmin = session.role === 'admin';
        const where = isAdmin
            ? { status: 'pending' }
            : { userId: session.userId, status: 'pending' };
        const reqs = await prisma.withdrawal.findMany({ where, orderBy: { createdAt: 'desc' } });
        if (!reqs.length) {
            return ctx.reply('–ù–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤.', require('../keyboards/main')(session.role));
        }
        for (const w of reqs) {
            const userName = isAdmin
                ? (await prisma.user.findUnique({ where: { id: w.userId }, select: { username: true } })).username
                : ctx.from.username;
            const msg = `ID: ${w.id}\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${userName}\n–°—É–º–∞: ${w.amount} ${w.currency}\n–ö–∞—Ä—Ç–∫–∞: ${w.cardNumber}`;
            if (isAdmin) {
                await ctx.reply(msg, Markup.inlineKeyboard([
                    Markup.button.callback('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', `wd_conf_${w.id}`),
                    Markup.button.callback('–°–∫–∞—Å—É–≤–∞—Ç–∏', `wd_cancel_${w.id}`)
                ]));
            } else {
                await ctx.reply(msg);
            }
        }
        return ctx.reply('–û—Å—å –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∏.', require('../keyboards/main')(session.role));
    });
};
